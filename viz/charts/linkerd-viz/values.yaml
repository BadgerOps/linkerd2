# Default values for linkerd.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

namespace: linkerd-viz

# -- Control plane label. Do not edit
controllerComponentLabel: linkerd.io/control-plane-component
# -- Control plane label. Do not edit  
controllerNamespaceLabel: linkerd.io/control-plane-ns
# -- Control plane label. Do not edit 
linkerdNamespaceLabel: linkerd.io/is-control-plane
workloadNamespaceLabel: linkerd.io/workload-ns

proxyInjectAnnotation: linkerd.io/inject

# -- Host header validation regex for the dashboard. See the [Linkerd
# documentation](https://linkerd.io/2/tasks/exposing-dashboard) for more
# information
enforcedHostRegexp: ""


# -|- CPU and Memory resources required by controllers publicAPI (see
#`global.proxy.resources` for sub-fields)
#publicAPIResources:
#-|- CPU and Memory resources required by proxy injected into controllers public
#API pod (see `global.proxy.resources` for sub-fields) values
#`global.proxy.resources`
#publicAPIProxyResources:

# tap configuration
tap:
  # -- Do not create a secret resource for the Tap component. If this is set to
  # `true`, the value `tap.caBundle` must be set (see below).
  externalSecret: false
  # -- Certificate for the Tap component. If not provided then Helm will
  # generate one.
  crtPEM: |

  # -- Certificate key for Tap component. If not provided then Helm will
  # generate one. 
  keyPEM: |

  # -- Bundle of CA certificates for Tap component. If not provided then Helm
  # will use the certificate generated  for `tap.crtPEM`. If
  # `tap.externalSecret` is set to true, this value must be set, as no
  # certificate will be generated.
  caBundle: |

# -|- CPU and Memory resources required by tap (see `global.proxy.resources` for
#sub-fields)
#tapResources:
# -|- CPU and Memory resources required by proxy injected into tap pod (see
#`global.proxy.resources` for sub-fields)
#tapProxyResources:

# web dashboard configuration
dashboard:
  # -- Number of replicas of dashboard
  replicas: 1
  # -- Docker image for the web container
  image: ghcr.io/linkerd/web
# -<- CPU and Memory resources required by web UI (see `global.proxy.resources`
#for sub-fields)
#webResources:
# -|- CPU and Memory resources required by proxy injected into web UI pod (see
#`global.proxy.resources` for sub-fields)
#webProxyResources:

# -- NodeSelector section, See the [K8S
# documentation](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector)
# for more information
nodeSelector:
  beta.kubernetes.io/os: linux

# -|- Tolerations section, See the 
# [K8S documentation](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/)
# for more information
#tolerations:

# Configuration for Add-ons
# Full configuration fields https://github.com/linkerd/linkerd2/tree/master/charts/linkerd2#add-ons-configuration

grafana:
  enabled: true
  # image:
  #   name: ghcr.io/linkerd/grafana
  #   tag: latest
  # set resource requests and limits for grafana and its linkerd proxy respectively
  # see global.proxy.resources in the linkerd2 chart for details.
  # resources:
  # proxy:
  #   resources:

prometheus:
  enabled: true
  # image: prom/prometheus:v2.15.3
  # args:
  #  storage.tsdb.retention.time: 6h
  #  log.level: debug
  # globalConfig:
  #   scrape_interval: 10s
  #   scrape_timeout: 10s
  # scrapeConfigs:
  # - job_name: 'kubernetes-nodes'
  #   scheme: https
  #   tls_config:
  #     ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
  #   bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  #   kubernetes_sd_configs:
  #   - role: node
  #   relabel_configs:
  #   - action: labelmap
  #     regex: __meta_kubernetes_node_label_(.+)
  # alertManagers:
  # - scheme: http
  #   static_configs:
  #   - targets:
  #     - "alertmanager.linkerd.svc:9093"
  # alertRelabelConfigs:
  # - action: labeldrop
  #   regex: prometheus_replica
  # ruleConfigMapMounts:
  # - name: alerting-rules
  #   subPath: alerting_rules.yml
  #   configMap: linkerd-prometheus-rules
  # - name: recording-rules
  #   subPath: recording_rules.yml
  #   configMap: linkerd-prometheus-rules
  ###
  ### Sidecar containers allow access to the prometheus data directory,
  ### e.g. for exporting data to non-prometheus systems.
  # sidecarContainers:
  # - name: sidecar
  #   image: gcr.io/myproject/stackdriver-prometheus-sidecar
  #   imagePullPolicy: Always
  #   command:
  #   - /bin/sh
  #   - -c
  #   - |
  #     exec /bin/stackdriver-prometheus-sidecar \
  #       --stackdriver.project-id=myproject \
  #       --stackdriver.kubernetes.location=us-central1 \
  #       --stackdriver.kubernetes.cluster-name=mycluster \
  #       --prometheus.wal-directory=/data/wal \
  #       --log.level=info
  #   volumeMounts:
  #   - mountPath: /data
  #     name: data
  #   ports:
  #   - name: foo
  #     containerPort: 9091
  #     protocol: TCP
  ### WARNING: persistence is experimental and has not been tested/vetted by the Linkerd team.
  ### As such, please refer to https://linkerd.io/2/tasks/exporting-metrics/ for the recommended approach to metrics data retention.
  # if enabled, creates a persistent volume claim for prometheus data
  # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims
  # persistence:
  #   storageClass: ""
  #   accessMode: ReadWriteOnce
  #   size: 8Gi
  # resources:
  # proxy:
  #   resources:

tracing:
  enabled: false
  # collector:
  #  image: omnition/opencensus-collector:0.1.11
  #  resources:
  # jaeger:
  #  image: jaegertracing/all-in-one:1.19.2
  #  resources:
